// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	core "github.com/arthurshafikov/appcreative/backend/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockWeather is a mock of Weather interface.
type MockWeather struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherMockRecorder
}

// MockWeatherMockRecorder is the mock recorder for MockWeather.
type MockWeatherMockRecorder struct {
	mock *MockWeather
}

// NewMockWeather creates a new mock instance.
func NewMockWeather(ctrl *gomock.Controller) *MockWeather {
	mock := &MockWeather{ctrl: ctrl}
	mock.recorder = &MockWeatherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeather) EXPECT() *MockWeatherMockRecorder {
	return m.recorder
}

// GetCurrentWeather mocks base method.
func (m *MockWeather) GetCurrentWeather(city string) (*core.WeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentWeather", city)
	ret0, _ := ret[0].(*core.WeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentWeather indicates an expected call of GetCurrentWeather.
func (mr *MockWeatherMockRecorder) GetCurrentWeather(city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentWeather", reflect.TypeOf((*MockWeather)(nil).GetCurrentWeather), city)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogger) Error(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", err)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), err)
}

// MockWeatherClient is a mock of WeatherClient interface.
type MockWeatherClient struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherClientMockRecorder
}

// MockWeatherClientMockRecorder is the mock recorder for MockWeatherClient.
type MockWeatherClientMockRecorder struct {
	mock *MockWeatherClient
}

// NewMockWeatherClient creates a new mock instance.
func NewMockWeatherClient(ctrl *gomock.Controller) *MockWeatherClient {
	mock := &MockWeatherClient{ctrl: ctrl}
	mock.recorder = &MockWeatherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherClient) EXPECT() *MockWeatherClientMockRecorder {
	return m.recorder
}

// GetCurrentWeather mocks base method.
func (m *MockWeatherClient) GetCurrentWeather(city string) (*core.WeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentWeather", city)
	ret0, _ := ret[0].(*core.WeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentWeather indicates an expected call of GetCurrentWeather.
func (mr *MockWeatherClientMockRecorder) GetCurrentWeather(city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentWeather", reflect.TypeOf((*MockWeatherClient)(nil).GetCurrentWeather), city)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetAndUnmarshal mocks base method.
func (m *MockCache) GetAndUnmarshal(key string, pointer any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndUnmarshal", key, pointer)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAndUnmarshal indicates an expected call of GetAndUnmarshal.
func (mr *MockCacheMockRecorder) GetAndUnmarshal(key, pointer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndUnmarshal", reflect.TypeOf((*MockCache)(nil).GetAndUnmarshal), key, pointer)
}

// MarshalAndSet mocks base method.
func (m *MockCache) MarshalAndSet(key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalAndSet", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarshalAndSet indicates an expected call of MarshalAndSet.
func (mr *MockCacheMockRecorder) MarshalAndSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalAndSet", reflect.TypeOf((*MockCache)(nil).MarshalAndSet), key, value)
}
