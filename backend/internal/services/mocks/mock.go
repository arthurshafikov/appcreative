// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	core "github.com/arthurshafikov/appcreative/backend/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockWeather is a mock of Weather interface.
type MockWeather struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherMockRecorder
}

// MockWeatherMockRecorder is the mock recorder for MockWeather.
type MockWeatherMockRecorder struct {
	mock *MockWeather
}

// NewMockWeather creates a new mock instance.
func NewMockWeather(ctrl *gomock.Controller) *MockWeather {
	mock := &MockWeather{ctrl: ctrl}
	mock.recorder = &MockWeatherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeather) EXPECT() *MockWeatherMockRecorder {
	return m.recorder
}

// GetCurrentWeather mocks base method.
func (m *MockWeather) GetCurrentWeather(city string) *core.WeatherResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentWeather", city)
	ret0, _ := ret[0].(*core.WeatherResponse)
	return ret0
}

// GetCurrentWeather indicates an expected call of GetCurrentWeather.
func (mr *MockWeatherMockRecorder) GetCurrentWeather(city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentWeather", reflect.TypeOf((*MockWeather)(nil).GetCurrentWeather), city)
}
